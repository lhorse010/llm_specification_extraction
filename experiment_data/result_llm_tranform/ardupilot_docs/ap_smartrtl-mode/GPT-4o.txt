[
  {
    "sentence": "The buffer is of a limited size (see below) and once it is full, \"SmartRTL deactivated: buffer full\" will appear on the ground stations's HUD and the user will no longer be able to switch into this mode.",
    "formula": "G(BufferFull → (HUD ∧ ¬SwitchMode))",
    "explanation": "The formula states that globally, whenever the buffer becomes full (BufferFull), the message appears on the HUD (HUD) and the user is unable to switch modes (¬SwitchMode)."
  },
  {
    "sentence": "SmartRTL saves points at a maximum of 3 per second, but only if the vehicle has moved at least SRTL_ACCURACY meters from the previous point.",
    "formula": "G(MoveDistance → SavePoints)",
    "explanation": "Globally, if the vehicle moves the required distance (MoveDistance), it allows the saving of points (SavePoints), respecting the 3 points per second limit."
  },
  {
    "sentence": "The FS_GCS_ENABLE and FS_THR_ENABLE parameters set to 4 or 5 the vehicle will switch to SmartRTL->RTL or SmartRTL->Land based on whether the correct conditions allows the mode.",
    "formula": "G((ParamSet4 ∨ ParamSet5) → (SwitchToRTL ∨ SwitchToLand))",
    "explanation": "Globally, if parameters are set to 4 or 5 (ParamSet4 ∨ ParamSet5), the vehicle will switch to either RTL or Land mode (SwitchToRTL ∨ SwitchToLand) based on conditions."
  },
  {
    "sentence": "The vehicle must have a good position estimate (LEDs should be green) when the vehicle is armed or SmartRTL will be disabled.",
    "formula": "G((Armed ∧ ¬GoodPosition) → ¬SmartRTL)",
    "explanation": "Globally, if the vehicle is armed (Armed) without a good position estimate (¬GoodPosition), SmartRTL will be disabled (¬SmartRTL)."
  },
  {
    "sentence": "If the vehicle is armed without a good position estimate, \"SmartRTL deactivated: bad position\" will be sent to the ground station.",
    "formula": "G((Armed ∧ ¬GoodPosition) → SendBadPosition)",
    "explanation": "Globally, if the vehicle is armed without a good position estimate, a message indicating a bad position is sent (SendBadPosition)."
  },
  {
    "sentence": "1.RTL_SPEED can be used to set the speed (in meters/second) at which the vehicle will return to home.",
    "formula": "G(SetRTLSpeed → ReturnHomeSpeed)",
    "explanation": "Globally, setting RTL_SPEED (SetRTLSpeed) dictates the speed at which the vehicle returns home (ReturnHomeSpeed)."
  },
  {
    "sentence": "2.RTL_ALT_FINAL if set to 0, will land at home, otherwise will stop and hover above home at this altitude upon completion of the return.",
    "formula": "G((RTL_ALT_FINAL = 0 → LandAtHome) ∧ (RTL_ALT_FINAL ≠ 0 → HoverAboveHome))",
    "explanation": "Globally, if RTL_ALT_FINAL is 0, the vehicle will land at home (LandAtHome), otherwise, it will hover above home (HoverAboveHome)."
  },
  {
    "sentence": "If the maximum number of points is exhausted, \"SmartRTL deactivated: buffer full\" will be sent to the ground station and the user will not be able to switch into SmartRTL.",
    "formula": "G(MaxPoints → (BufferFullMessage ∧ ¬SwitchToSmartRTL))",
    "explanation": "Globally, if the maximum number of points is reached (MaxPoints), the buffer full message is sent (BufferFullMessage), and the user cannot switch to SmartRTL (¬SwitchToSmartRTL)."
  },
  {
    "sentence": "5.SRTL_OPTIONS has one bit, currently, bit 2, that if set (value of \"4\") will ignore pilot yaw commands while in SmartRTL.",
    "formula": "G(Bit2Set → IgnoreYaw)",
    "explanation": "Globally, if bit 2 is set in SRTL_OPTIONS (Bit2Set), yaw commands are ignored while in SmartRTL (IgnoreYaw)."
  },
  {
    "sentence": "After 50 points are saved it goes back and simplifies them into lines again using that SRTL_ACCURACY.",
    "formula": "F(Save50Points ∧ G(SimplifyLines))",
    "explanation": "Eventually, after 50 points are saved (Save50Points), the points are simplified into lines using SRTL_ACCURACY (SimplifyLines)."
  },
  {
    "sentence": "The simplify algorithm will turn curved paths into straight lines but the line should never be more than this distance from the original path.",
    "formula": "G((C → S) ∧ ¬(D > MaxDist))",
    "explanation": "Here, C represents the condition of a curved path, and S represents the path being simplified into a straight line. D represents the distance from the original path, and MaxDist is the maximum allowable distance. The formula ensures that whenever a curved path is detected, it is converted to a straight line, and the distance constraint is never violated."
  },
  {
    "sentence": "Additional Failsafes that may be set to switch to SmartRTL are: BATT_FS_CRT_ACT, BATT_FS_LOW_ACT, BATT2_FS_LOW_ACT, and BATT2_FS_CRT_ACT.",
    "formula": "F(BATT_FS_CRT_ACT ∨ BATT_FS_LOW_ACT ∨ BATT2_FS_LOW_ACT ∨ BATT2_FS_CRT_ACT)",
    "explanation": "This formula captures the possibility that any of the listed failsafes can trigger a switch to SmartRTL. The use of 'F' indicates that at some point in the future, at least one of these conditions will occur."
  }
]