[
  {
    "sentence": "This module is activated if the launch parameter launch_out_of_lane_module is set to true.",
    "formula": "L → A",
    "explanation": "Here, L represents the launch parameter being set to true, and A represents the module being activated. The implication indicates that activation occurs if the parameter is true."
  },
  {
    "sentence": "This module calculates if out of lane collisions occur and insert stop point before the collisions if necessary.",
    "formula": "C → (O ∧ F(S))",
    "explanation": "C represents the module calculating, O represents detecting out of lane collisions, and S represents inserting a stop point. If a collision is detected, a stop point is eventually inserted."
  },
  {
    "sentence": "The algorithm assumes the input ego trajectory contains accurate time_from_start values in order to calculate accurate time to collisions with the predicted objects.",
    "formula": "A → C",
    "explanation": "A represents the assumption of accurate time_from_start values, and C represents the accurate calculation of time to collisions. Accurate inputs are necessary for accurate calculations."
  },
  {
    "sentence": "The length of the trajectory used for generating the footprints is limited by the max_arc_length parameter.",
    "formula": "T → ¬(L ∧ ¬M)",
    "explanation": "T represents trajectory generation, L represents trajectory length exceeding the limit, and M represents the max_arc_length parameter. The formula ensures that trajectory length does not exceed the limit."
  },
  {
    "sentence": "1.ignore objects with a speed bellow the minimum_velocity parameter;",
    "formula": "S ∧ ¬V",
    "explanation": "S represents objects being considered, and V represents speed above minimum_velocity. Objects with speed below the threshold are ignored."
  },
  {
    "sentence": "2.ignore objects coming from behind the ego vehicle if parameter ignore_behind_ego is set to true;",
    "formula": "B ∧ I → ¬C",
    "explanation": "B represents objects coming from behind, I represents the parameter being true, and C represents consideration of the object. Objects from behind are ignored if the parameter is true."
  },
  {
    "sentence": "3.ignore predicted paths whose confidence value is bellow the predicted_path_min_confidence parameter;",
    "formula": "P ∧ ¬C",
    "explanation": "P represents predicted paths, and C represents confidence above the threshold. Paths with confidence below the threshold are ignored."
  },
  {
    "sentence": "4.cut the points of predicted paths going beyond the stop line of a red traffic light if parameter cut_predicted_paths_beyond_red_lights is set to true.",
    "formula": "R ∧ C → ¬G(P)",
    "explanation": "R represents the red light condition, C represents the parameter being true, and P represents paths beyond the stop line. Paths are cut at the stop line if the parameter is true."
  },
  {
    "sentence": "In the case where parameter mode is set to threshold and the calculated time is less than threshold.time_threshold parameter, then we decide to avoid the out of lane area.",
    "formula": "M ∧ (T < C) → A",
    "explanation": "M represents mode set to threshold, T represents calculated time, C represents the threshold, and A represents avoiding the area. Avoidance occurs if the calculated time is below the threshold."
  },
  {
    "sentence": "If the time to collision is bellow the ttc.threshold parameter value, we decide to avoid the out of lane area.",
    "formula": "T < C → A",
    "explanation": "T represents time to collision, C represents the threshold, and A represents avoiding the area. Avoidance occurs if the time to collision is below the threshold."
  },
  {
    "sentence": "First, the minimum stopping distance of the ego vehicle is calculated based on the jerk and deceleration constraints set by the velocity smoother parameters.",
    "formula": "G(C → F(M))",
    "explanation": "C represents the conditions of jerk and deceleration constraints being set. M represents the calculation of the minimum stopping distance. Globally, whenever C is true, eventually M will be true."
  },
  {
    "sentence": "We then search for the furthest pose along the trajectory where the ego footprint stays inside of the ego lane (calculate in step 2) and constraint the search to be between the minimum stopping distance and the 1st trajectory point with a collision to avoid (as determined in the previous step).",
    "formula": "G((E ∧ ¬C) → F(P ∧ (D ∧ ¬A)))",
    "explanation": "E represents the event of searching the trajectory, C is a collision at the trajectory point, P is the pose inside the ego lane, D is the minimum stopping distance, and A is the collision point. This ensures that when searching, you find a pose within the constraints."
  },
  {
    "sentence": "If this distance is below the actions.slowdown.threshold, a velocity of actions.slowdown.velocity will be used.",
    "formula": "G(D < T → V = S)",
    "explanation": "D is the distance, T is the slowdown threshold, and S is the slowdown velocity. Globally, if the distance is below the threshold, the velocity is set to the slowdown velocity."
  },
  {
    "sentence": "If the distance is below the actions.stop.threshold, a velocity of 0m/s will be used.",
    "formula": "G(D < T → V = 0)",
    "explanation": "D is the distance, T is the stop threshold. Globally, if the distance is below the stop threshold, the velocity is set to 0."
  },
  {
    "sentence": "To make the decision more stable, a stop or slowdown pose is used for a minimum duration set by the action.min_duration parameter.",
    "formula": "G((S ∨ L) → F[0, M](S ∨ L))",
    "explanation": "S represents a stop pose, L a slowdown pose, and M is the minimum duration. Globally, if a stop or slowdown pose is used, it will persist for at least the minimum duration."
  },
  {
    "sentence": "In the second step, we calculate the lanelets where collisions should be avoided.",
    "formula": "G(S2 → F(C))",
    "explanation": "S2 represents the second step, and C represents the calculation of lanelets to avoid collisions. Globally, during the second step, this calculation eventually happens."
  },
  {
    "sentence": "For each out of lane area, we calculate the times when a dynamic object will overlap the area based on its filtered predicted paths.",
    "formula": "G(O → F(T))",
    "explanation": "O represents the out of lane area, and T represents the calculation of overlap times. Globally, for each out of lane area, these calculations will eventually occur."
  },
  {
    "sentence": "In the case where parameter mode is set to ttc, we calculate the time to collision by comparing the predicted time of the object with the time_from_start field contained in the trajectory point.",
    "formula": "G(M = TTC → F(C))",
    "explanation": "M represents the mode set to ttc, and C represents the calculation of time to collision. Globally, if the mode is ttc, the calculation eventually happens."
  },
  {
    "sentence": "The out_of_lane module adds deceleration and stop points to the ego trajectory in order to prevent collisions from occurring in these out of lane cases.",
    "formula": "G(O → F(D ∧ S))",
    "explanation": "O represents the out_of_lane condition, D the addition of deceleration points, and S the addition of stop points. Globally, in out of lane cases, these points are eventually added to the trajectory."
  },
  {
    "sentence": "Whether it is decided to slow down or stop is determined by the distance between the ego vehicle and the trajectory point to avoid.",
    "formula": "G(D < A → (V = S ∨ V = 0))",
    "explanation": "D is the distance, A is the avoidance point, S is slowdown velocity. Globally, if the distance is less than the avoidance point, the decision is made to slow down or stop."
  },
  {
    "sentence": "Otherwise, the stop or slowdown pose will only be discarded after no out of lane collision is detection for the set duration.",
    "formula": "¬(P ∨ Q) U[0, d] ¬C",
    "explanation": "Here, P represents the stop pose, Q represents the slowdown pose, and C represents an out of lane collision. The formula states that the stop or slowdown pose (P or Q) is maintained until (U) there is a continuous period of duration 'd' where no collision (¬C) is detected."
  }
]