{
    "temporal_logic_formulars": [
        {
            "section-id": 1,
            "sentence-id": 0,
            "sentence": "This module is activated if the launch parameter launch_out_of_lane_module is set to true.",
            "tl": "always ( Thismoduleacited == launcharameterlr )"
        },
        {
            "section-id": 3,
            "sentence-id": 1,
            "sentence": "The length of the trajectory used for generating the footprints is limited by the max_arc_length parameter.",
            "tl": "always ( lengthtrajectoryused == generatingfotprint = itslimSted ) since ( l == eritednotednmax_ar ) -> ax_arc_lengte == hpararar_letecgtepr )"
        },
        {
            "section-id": 6,
            "sentence-id": 1,
            "sentence": "1.ignore objects with a speed bellow the minimum_velocity parameter;",
            "tl": "always ( i1gnoreobjectswit == hasededlowminmiuminm_velocite == pam_vrameteter )"
        },
        {
            "section-id": 6,
            "sentence-id": 2,
            "sentence": "2.ignore objects coming from behind the ego vehicle if parameter ignore_behind_ego is set to true;",
            "tl": "always ( e2ignoreobjects == begovehicleparameterignore_ == ere_bhind_egore )"
        },
        {
            "section-id": 6,
            "sentence-id": 3,
            "sentence": "3.ignore predicted paths whose confidence value is bellow the predicted_path_min_confidence parameter;",
            "tl": "always ( eignoreprdedicted == dpathswhoseconidecence )"
        },
        {
            "section-id": 6,
            "sentence-id": 4,
            "sentence": "4.cut the points of predicted paths going beyond the stop line of a red traffic light if parameter cut_predicted_paths_beyond_red_lights is set to true.",
            "tl": "always ( cutpoints == edctspedictgoined ) until [ 0 : 4 . uthgoing == dednhStonde ) -> eraficl == traetercut_ded_ped_pt_ == d_hah_ed_ed_ep )"
        },
        {
            "section-id": 7,
            "sentence-id": 1,
            "sentence": "In the case where parameter mode is set to threshold and the calculated time is less than threshold.time_threshold parameter, then we decide to avoid the out of lane area.",
            "tl": "always ( whereparameter == calc and calulhresholdpae == reteterameter -> fall ( wededecide == avoidearealarea ) )"
        },
        {
            "section-id": 7,
            "sentence-id": 3,
            "sentence": "If the time to collision is bellow the ttc.threshold parameter value, we decide to avoid the out of lane area.",
            "tl": "always ( colisionbelow == clarameter )"
        },
        {
            "section-id": 8,
            "sentence-id": 8,
            "sentence": "If this distance is bellow the actions.slowdown.threshold, a velocity of actions.slowdown.velocity will be used.",
            "tl": "always ( distanceblow == slowdowdon . avelocityacit == S ) until ( delociocityav == cionslonslocitwdn ) -> ( slowdowdow == dowdownvelocnvelocit == lociylelociysl ) )"
        },
        {
            "section-id": 8,
            "sentence-id": 9,
            "sentence": "If the distance is bellow the actions.stop.threshold, a velocity of 0m/s will be used.",
            "tl": "always ( distanceblow == actions . stop . avelocity0msed )"
        },
        {
            "section-id": 9,
            "sentence-id": 1,
            "sentence": "To make the decision more stable, a stop or slowdown pose is used for a minimum duration set by the action.min_duration parameter.",
            "tl": "always ( Tomakedecisions == stableasto or slowdwdownpseused == aminuratiurationu )"
        },
        {
            "section-id": 7,
            "sentence-id": 2,
            "sentence": "In the case where parameter mode is set to ttc, we calculate the time to collision by comparing the predicted time of the object with the time_from_start field contained in the trajectory point.",
            "tl": "always ( whereparameter == ttcecalculate ) until ( colin == colinbycopredaic ) -> ( predictedte == tm_ftie_romtice_ftroicedcotastedatr )"
        },
        {
            "section-id": 8,
            "sentence-id": 0,
            "sentence": "First, the minimum stopping distance of the ego vehicle is calculated based on the jerk and deceleration constraints set by the velocity smoother parameters.",
            "tl": "always ( mrstminimumst == tpinicegdieoceclecaledcl == edaledcaser ) and edcer == tratinstratselocinsotsrater )"
        },
        {
            "section-id": 9,
            "sentence-id": 3,
            "sentence": "Otherwise, the stop or slowdown pose will only be discarded after no out of lane collision is detection for the set duration.",
            "tl": "always ( Otherwise == stop or not ( slowdonly == discarded ) -> ( lanecolisionde == detectionduration ) until ( not ( s == lolwduasecio ) ) )"
        },
        {
            "section-id": 2,
            "sentence-id": 1,
            "sentence": "The algorithm assumes the input ego trajectory contains accurate time_from_start values in order to calculate accurate time to collisions with the predicted objects.",
            "tl": "always ( algorithmsumes == inpegotracontacsacur ) until ( algore == eteticoicointacsa ) -> rtm_etrtalrdue == calrlaculateculatecuratecuatecuratecula == culolacSecuisicicisitdedtsodedctedcted )"
        },
        {
            "section-id": 8,
            "sentence-id": 1,
            "sentence": "We then search for the furthest pose along the trajectory where the ego footprint stays inside of the ego lane (calculate in step 2) and constraint the search to be between the minimum stopping distance and the 1st trajectory point with a collision to avoid (as determined in the previous step).",
            "tl": "always ( rise ( eWsearc == iostahsocinlo ) -> ( ertraheSe == egotrecolnecSte ) and ( cesaterchi == sinicsoicitasoicicsoicics ) )"
        },
        {
            "section-id": 8,
            "sentence-id": 2,
            "sentence": "The search is done by moving backward along the trajectory with a distance step set by the action.precision parameter.",
            "tl": "always ( searchdoneb == yingacrdalong == trajectodectrywit ) until ( str == aitahadKrycistetadK ) -> epepbycstepbyrep == eprecistepre )"
        },
        {
            "section-id": 8,
            "sentence-id": 3,
            "sentence": "We first do this search for a footprint expanded with the ego.extra_..._offset, action.longitudinal_distance_buffer and action.lateral_distance_buffer parameters.",
            "tl": "always ( eWdosearch == afotprinexStedw == xo_ . K ) until ( _ofgiced == extra_ . lone ) -> lngitdnalit == S_dstance_bufe and latr_da == e_bfe_uferace_bfracerasferaferateraeramerater )"
        },
        {
            "section-id": 8,
            "sentence-id": 4,
            "sentence": "If no valid pose is found, we search again while only considering the extra offsets but without considering the distance buffers.",
            "tl": "always ( validposefond == esarcoginl ) until ( er == ahaginlyconsiexder == extrafsetra ) -> ( sbtcofsetset == sbtrinsiederingderinstri == deringder )"
        },
        {
            "section-id": 8,
            "sentence-id": 5,
            "sentence": "If still no valid pose is found, we use the base ego footprint without any offset.",
            "tl": "always ( stilvalidposef == oundweusebasego == eofotprintofset )"
        },
        {
            "section-id": 8,
            "sentence-id": 6,
            "sentence": "In case no pose is found, we fallback to using the pose before the detected collision without caring if it is out of lane or not.",
            "tl": "always ( posefoundwe == falbacksingpose or not fall ( colilisinon == carlingit ) )"
        },
        {
            "section-id": 8,
            "sentence-id": 7,
            "sentence": "Whether it is decided to slow down or stop is determined by the distance between the ego vehicle and the trajectory point to avoid.",
            "tl": "always ( Whetheritdecided == slow or stopdetermined == ibydistacegovehicle and tregovehicle == tratrajectre )"
        },
        {
            "section-id": 9,
            "sentence-id": 2,
            "sentence": "If during that time a new pose closer to the ego vehicle is generated, then it replaces the previous one.",
            "tl": "always ( anewposecloser == egovehiclegenrated -> itreplacespes == rviousone )"
        }
    ]
}