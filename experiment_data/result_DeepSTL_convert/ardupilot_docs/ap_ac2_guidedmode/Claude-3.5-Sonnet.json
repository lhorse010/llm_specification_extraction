{
    "temporal_logic_formulars": [
        {
            "section-id": 2,
            "sentence-id": 3,
            "sentence": "Once the location is reached, the copter will hover at that location, waiting for the next target.",
            "tl": "always ( Oncelocationred == copetrhoverlocatitS )"
        },
        {
            "section-id": 4,
            "sentence-id": 2,
            "sentence": "3.Take off in Loiter Mode and climb to a safe altitude",
            "tl": "always ( Takeoff == LoiterMode and climbasa == safealealtitudetde )"
        },
        {
            "section-id": 4,
            "sentence-id": 7,
            "sentence": "7.The vehicle should fly to the target location and wait there until you enter another location or switch to another mode.",
            "tl": "always ( rise ( lvehiclefly == targetlocation ) and waityouanotherloc == tionswio or switherlocat == hatcherlo )"
        },
        {
            "section-id": 6,
            "sentence-id": 0,
            "sentence": "The maximum horizontal speed of the copter can be adjusted with the Speed (WPNAV_SPEED) parameter from the Mission Planner's Config/Tuning >> Copter Pids screen (see blue box above).",
            "tl": "always ( maximumhorizoedz == acopecadnSdjustedw and not ( Sped > 1 dSPVd < SEDpareterametesinPlnPanes == sonerC ) -> ( not ( sConegT == nigCopeinueisedse ) ) until ( m == = eseseCopgCopenigCopede ) )"
        },
        {
            "section-id": 6,
            "sentence-id": 3,
            "sentence": "The vertical speeds up and down can similar be adjusted with the Speed Up (WPNAV_SPEED_UP) and Speed Dn (WPNAV_SPEED_DN) parameters.",
            "tl": "always ( verticalspede == spailair ) and ( dadudted == SpedthedUpWPNAV_SED_UP and ( Sped == SpedNWP ) -> ( SpedDnWP and SedD == NAVPED_SE_D_Npaed < arae_NpeEe_D_Npare ) )"
        },
        {
            "section-id": 6,
            "sentence-id": 4,
            "sentence": "WPNAV_ACCEL_Z determines how fast the speed can change.",
            "tl": "always ( rise ( eWPNAV_CEL_Zdete == rmineshowfastspedcan ) )"
        },
        {
            "section-id": 7,
            "sentence-id": 1,
            "sentence": "Bit 0 (e.g. \"1\") allowing arming in Guided mode from the RC transmitter",
            "tl": "always ( Bit0e > 0 . g . 1 and Bilowingarming == Guided < GCtrandedd = RCtransmiterer )"
        },
        {
            "section-id": 7,
            "sentence-id": 2,
            "sentence": "Bit 2 (e.g. \"4\") disables the pilot's ability to change the vehicle's heading using the RC transmitter",
            "tl": "always ( not rise ( iBt2eglespilo == sabilility ) and not rise ( sehehicles == sheadingusingRCtransmiter ) )"
        },
        {
            "section-id": 7,
            "sentence-id": 3,
            "sentence": "Bit 3 (e.g. \"8\") changes the interpretation of the SET_ATTITUDE_TARGET MAVLink command's thrust field to be pure thrust expressed as a value between 0 and 1, instead of a climb rate.",
            "tl": "always ( rise ( interpegtait < 3 onSET_TIT == ETETMAVLTETGkcomands = hrustretexpsed ) and iese == setrseteprsalmS1icalmredatese )"
        },
        {
            "section-id": 7,
            "sentence-id": 5,
            "sentence": "Bit 4 (e.g. \"16\") disables the position controller's XY axis position error correction.",
            "tl": "always ( not ( disablespoitioncontrler == sXYaxisposiosiontroler ) and not ( r == sXYaxiosrosionerororrrorrorrorrorrr == rororrcrerorerorer ) and Bicriorecrecrecrtecr )"
        },
        {
            "section-id": 7,
            "sentence-id": 6,
            "sentence": "This may be useful if an external controller is providing high speed targets which already include position error correction",
            "tl": "always ( eThismayusefulaner == anlocrterolerpoinhighid == ghsedtaredtrgedt ) until ( hed == salredghedtredtrglitlredtisalredt == ghedtredtlredt ) -> alretsalredalredyinl == lredycludepoinreiosiororo"
        },
        {
            "section-id": 7,
            "sentence-id": 7,
            "sentence": "Bit 5 (e.g. \"32\") is the same as above but affects the position controller's velocity error correction",
            "tl": "always ( iBt5e . g > 3 and iBt5egc < 2 ) until ( butafectsosit == ionconcolerstler ) -> not ( svelocityer == rorrocrorcrecrecrorecrecorecoretioreio == tionore ) )"
        },
        {
            "section-id": 7,
            "sentence-id": 8,
            "sentence": "Bit 6 (e.g. \"64\") enables S-Curve path planning (the same as is used in Auto mode) to reach the position target.",
            "tl": "always ( enaBlesS > 6 and enablesSCurvepathlaning < u )"
        },
        {
            "section-id": 7,
            "sentence-id": 11,
            "sentence": "Bit 7 (e.g. \"128\") enables weathervaning",
            "tl": "always ( Bit7e > 4.1 and Bit7egw < 28 )"
        },
        {
            "section-id": 7,
            "sentence-id": 12,
            "sentence": "The GUID_TIMEOUT parameter holds the timeout (in seconds) when the vehicle is being controlled using attitude, velocity and/or acceleration commands.",
            "tl": "always ( ( acGUID_TIMEOUTparamer == secoicondse ) and ( velecoldu == lsiusitredusingattititult ) or at == tceledeledeveveveololtiucit )"
        },
        {
            "section-id": 7,
            "sentence-id": 13,
            "sentence": "If no commands are received from the companion computer for this many seconds, the vehicle will slow to a stop (if velocity and/or acceleration commands were being provided) or hold a level hover (if attitude commands were provided).",
            "tl": "always ( comandseivedcoed == cmSiconisoncmped ) until ( manion == conecoseclecondslelowatr ) -> ( aceclop > ( ac > 1 selop > 1 and aceleraceloneatma <= vcocmatervepodervieriededeperiedtrded == riedte ) or ( ecicola"
        },
        {
            "section-id": 6,
            "sentence-id": 5,
            "sentence": "Speed can also be controlled while in GUIDED mode with MAVLink commands like DO_CHANGE_SPEED.",
            "tl": "always ( Spedcanalsocolc == GUIDEDwithMAVL == kcomdndsO_CHANGE_SPED )"
        },
        {
            "section-id": 7,
            "sentence-id": 9,
            "sentence": "This may result a smoother acceleration and deceleration but the position target cannot be updated quickly.",
            "tl": "always ( hismayresult == moteraceleration and decelration == tiontStargtpositSrgetontargetStargetpono == targetdnotargetptdnot )"
        },
        {
            "section-id": 7,
            "sentence-id": 10,
            "sentence": "This also allows object avoidance path planning (e.g. Bendy Ruler and Dijkstras) to be used in Guided mode",
            "tl": "always ( Thisalsoalowso == jectaviancepahlnin and ( geng > 4 . gBendyRulerDi < 1 ) and ( Bendjkstras == usedGuidededededuidededed ) )"
        },
        {
            "section-id": 7,
            "sentence-id": 14,
            "sentence": "The default setting is 3 seconds.",
            "tl": "always ( defaultsetting == 3 seconds )"
        },
        {
            "section-id": 8,
            "sentence-id": 0,
            "sentence": "This variation of Guided mode does not require a GPS but it only accepts attitude targets.",
            "tl": "always ( not ( ThisvariationGuided == requireaGPSbutitonl ) and tonlyacept == tsatittudettStudet = detattta = detrgetrgets )"
        },
        {
            "section-id": 8,
            "sentence-id": 2,
            "sentence": "This mode was created for use by companion computers that may want to fly the vehicle as if it was in AltHold mode.",
            "tl": "always ( Thiscreatedu == sebyconcompanion == computersmay )"
        }
    ]
}