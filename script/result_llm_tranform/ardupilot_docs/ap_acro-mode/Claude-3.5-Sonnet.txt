[
  {
    "sentence": "Acro mode uses the RC sticks to control the angular velocity of the copter in each axis.",
    "formula": "G(A → (R ∧ V))",
    "explanation": "This formula states that globally (G), when Acro mode is active (A), it implies (→) that RC stick input (R) and angular velocity control (V) are both true. This captures the continuous nature of the control in Acro mode."
  },
  {
    "sentence": "Pure rate mode stabilization, utilizing only the gyros with no attitude feedback from the accelerometers, can be forced by setting bit 1 of ACRO_OPTIONS to one.",
    "formula": "G(B → (G ∧ ¬F))",
    "explanation": "Globally (G), when bit 1 of ACRO_OPTIONS is set to one (B), it implies (→) that gyro-only stabilization (G) is used and there's no feedback from accelerometers (¬F). This formula captures the conditional nature of the pure rate mode."
  },
  {
    "sentence": "The throttle is completely manual with no compensation for tilt angle of the vehicle.",
    "formula": "G(M ∧ ¬C)",
    "explanation": "This formula expresses that globally (G), the throttle is manual (M) and there's no compensation for tilt (¬C). The global operator ensures this condition holds at all times."
  },
  {
    "sentence": "If the pilot puts the throttle completely down the motors will go to their minimum rate and stabilization will cease.",
    "formula": "G(T → X(M ∧ ¬S))",
    "explanation": "Globally (G), if the throttle is completely down (T), then in the next state (X), the motors will be at minimum rate (M) and stabilization will not be active (¬S). This captures the immediate effect of the throttle action."
  },
  {
    "sentence": "Stick inputs are interpreted in the \"body frame\" (as opposed to Sport mode in which they are \"earth frame\").",
    "formula": "G(A → B) ∧ G(¬A → E)",
    "explanation": "This formula states that globally (G), when in Acro mode (A), stick inputs are in body frame (B), and when not in Acro mode (¬A), inputs are in earth frame (E). This distinguishes between the two modes of interpretation."
  },
  {
    "sentence": "Make sure you do have a reliable position estimate prior to arming, most commonly provided by 3D GPS fix with sufficient HDOP.",
    "formula": "G(¬A U (P ∧ G))",
    "explanation": "This formula expresses that globally (G), the system should not be armed (¬A) until (U) there's a reliable position estimate (P) and good GPS fix (G). This captures the safety requirement before arming."
  },
  {
    "sentence": "Acro mode can be setup to provide full stabilization at idle throttle.",
    "formula": "F(A ∧ (I → S))",
    "explanation": "Eventually (F), Acro mode (A) can be set up such that when idle throttle (I) is true, it implies full stabilization (S). This formula captures the potential configuration of Acro mode."
  },
  {
    "sentence": "1 = automatic leveling.",
    "formula": "G(O → L)",
    "explanation": "Globally (G), when option 1 is selected (O), it implies automatic leveling (L). This simple formula captures the meaning of the option setting."
  },
  {
    "sentence": "The vehicle will automatically return to the level when the pilot releases the sticks.",
    "formula": "G(R → F(L))",
    "explanation": "Globally (G), when the sticks are released (R), it implies that eventually (F) the vehicle will be level (L). This captures the automatic nature of the leveling action."
  },
  {
    "sentence": "2 (Default) = automatic leveling and lean angle limited.",
    "formula": "G(D → (L ∧ A))",
    "explanation": "Globally (G), when the default option is selected (D), it implies both automatic leveling (L) and angle limitation (A). This formula encapsulates the dual nature of the default setting."
  },
  {
    "sentence": "Includes the automatic leveling as option #1 but in addition the vehicle will not lean more than 45 degrees (this angle can be configured with the ANGLE_MAX parameter).",
    "formula": "G((L ∧ ¬(A → M)) → (O1 ∧ G(¬M)))",
    "explanation": "L represents automatic leveling, A represents the ANGLE_MAX parameter, M represents leaning more than 45 degrees, and O1 represents option #1. This formula ensures that when leveling is active and the angle is not exceeding the maximum, option #1 is enabled and the vehicle never leans beyond the specified angle."
  },
  {
    "sentence": "The trainer can be enabled/disabled using the Ch7/Ch8 switches or a channel setup via its RCx_OPTION parameter.",
    "formula": "G((S7 ∨ S8 ∨ R) ↔ T)",
    "explanation": "S7 and S8 represent Ch7 and Ch8 switches, R represents the RCx_OPTION parameter, and T represents the trainer being enabled. This formula captures the relationship between the switches/parameter and the trainer's state."
  },
  {
    "sentence": "With a 3 position switch the off position (i.e. PWM < 1200) will disable the trainer, middle position will enable option #1 (automatic leveling) and the top position (i.e. PWM > 1800) will enable option #2 (leveling and lean angle limited).",
    "formula": "G((P1 → ¬T) ∧ (P2 → O1) ∧ (P3 → O2))",
    "explanation": "P1, P2, and P3 represent the three switch positions, T represents the trainer being enabled, O1 and O2 represent options #1 and #2. This formula captures the behavior for each switch position."
  },
  {
    "sentence": "With a 2 position switch only options #0 (disabled) and option #2 (leveling & limited) are possible.",
    "formula": "G((P1 → O0) ∧ (P2 → O2))",
    "explanation": "P1 and P2 represent the two switch positions, O0 represents option #0 (disabled), and O2 represents option #2. This formula ensures that only these two options are possible with a 2-position switch."
  },
  {
    "sentence": "By setting the ACRO_BAL_ROLL and ACRO_BAL_PITCH parameters to non-zero values, this feature takes effect.",
    "formula": "G((R ∧ P) → F)",
    "explanation": "R represents ACRO_BAL_ROLL being non-zero, P represents ACRO_BAL_PITCH being non-zero, and F represents the feature taking effect. This formula captures the condition for the feature to be active."
  },
  {
    "sentence": "The Virtual Flybar will add decay term to the attitude controller to bleed off accumulated differences between the current attitude and accumulated commanded attitude, if the copter has not quickly obtained it, such as when sitting on the ground but stick inputs are being given.",
    "formula": "G((¬Q ∧ S ∧ I) → (V ∧ F(D)))",
    "explanation": "Q represents quickly obtaining the commanded attitude, S represents sitting on the ground, I represents stick inputs being given, V represents the Virtual Flybar being active, and D represents the decay term being added. This formula captures the conditions for the Virtual Flybar to add the decay term."
  },
  {
    "sentence": "Otherwise, when the helicopter clears it will jump to the accumulated commanded attitude when skids clear, perhaps surprisingly.",
    "formula": "G((C ∧ K) → X(J))",
    "explanation": "C represents the helicopter clearing, K represents skids clearing, and J represents jumping to the accumulated commanded attitude. The 'Next' operator X captures the immediate transition to the commanded attitude."
  },
  {
    "sentence": "This feature is not active when ACRO_TRAINER is active",
    "formula": "G(A → ¬F)",
    "explanation": "A represents ACRO_TRAINER being active, and F represents this feature being active. This formula ensures mutual exclusivity between ACRO_TRAINER and this feature."
  },
  {
    "sentence": "1.ACRO_RP_RATE controls the rotation rate for the roll and pitch axis.",
    "formula": "G(R ↔ (X ∧ Y))",
    "explanation": "R represents ACRO_RP_RATE, X represents the roll axis rotation rate, and Y represents the pitch axis rotation rate. This formula captures the control relationship between ACRO_RP_RATE and both axes."
  },
  {
    "sentence": "The default, 4.5, will command a 200deg/sec rotation rate.",
    "formula": "G((D ∧ X(R)) → S)",
    "explanation": "D represents the default setting of 4.5, R represents ACRO_RP_RATE being set, and S represents a 200deg/sec rotation rate. The 'Next' operator X captures the immediate effect of setting the rate."
  },
  {
    "sentence": "Higher values lead to higher rotation rates, lower to slower rotation rates.",
    "formula": "G((H → F(R)) ∧ (L → F(S)))",
    "explanation": "This formula states that globally, if we have higher values (H), it will eventually lead to higher rotation rates (R), and if we have lower values (L), it will eventually lead to slower rotation rates (S). The use of G ensures this relationship holds at all times."
  },
  {
    "sentence": "2.ACRO_Y_RATE controls the rotation rate for the yaw axis.",
    "formula": "G(Y ↔ R)",
    "explanation": "Here, Y represents ACRO_Y_RATE and R represents the rotation rate for the yaw axis. The formula states that globally, Y is equivalent to R, capturing the direct control relationship."
  },
  {
    "sentence": "The default, 4.5, like roll and pitch, will command a 200deg/sec rotation rate.",
    "formula": "G(D → X(R))",
    "explanation": "D represents the default setting of 4.5, and R represents the 200deg/sec rotation rate. The formula states that globally, when D is true, in the next state, R will be true, representing the command of the specific rotation rate."
  },
  {
    "sentence": "3.ACRO_RP_EXPO and ACRO_Y_EXPO are an amount of Exponential to apply to the pilots stick inputs that only applies to ACRO mode.",
    "formula": "G(A → (E ∧ M))",
    "explanation": "A represents ACRO mode, E represents the application of Exponential, and M represents the mode being ACRO. This formula captures that globally, when in ACRO mode, both the Exponential application and the ACRO mode condition are true."
  },
  {
    "sentence": "By default, ACRO mode is much more responsive, even in the center-sticks positions, than the other modes, so this parameter allows the pilot to fine-tune stick response in the control to match what they feel when they are in other modes such as Stabilize, AltHold, PosHold, etc.",
    "formula": "G(A → (R ∧ F(T)))",
    "explanation": "A represents ACRO mode, R represents high responsiveness, and T represents tuned stick response. The formula states that globally, when in ACRO mode, there's high responsiveness and eventually the ability to tune the stick response."
  },
  {
    "sentence": "The default value of 0 applies 30% expo to Roll and Pitch demands from the pilot.",
    "formula": "G(D → (E ∧ (R ∨ P)))",
    "explanation": "D represents the default value of 0, E represents the 30% expo application, R represents Roll demands, and P represents Pitch demands. This formula captures that globally, when the default value is set, the expo is applied to either Roll or Pitch demands."
  },
  {
    "sentence": "1.ATC_ACCEL_R_MAX and ATC_ACCEL_P_MAX: Maximum acceleration in roll/pitch axis measured in Centi-degres/sec/sec.",
    "formula": "G((R → M) ∧ (P → M))",
    "explanation": "R represents ATC_ACCEL_R_MAX, P represents ATC_ACCEL_P_MAX, and M represents the maximum acceleration. This formula states that globally, both R and P imply M, capturing the definition of these parameters as maximum accelerations."
  },
  {
    "sentence": "Let's say you have a highly nimble quadcopter and you have your ACRO_RP_RATE parameter set to 9, which translates to a roll request of ~400deg/sec.",
    "formula": "G(N ∧ A → F(R))",
    "explanation": "N represents a nimble quadcopter, A represents ACRO_RP_RATE set to 9, and R represents a roll request of ~400deg/sec. The formula states that globally, when we have a nimble quadcopter and the ACRO_RP_RATE is set to 9, it will eventually lead to a high roll request."
  },
  {
    "sentence": "The copter is not physically capable of going from 0deg/sec to 400deg/sec without a brief moment of acceleration.",
    "formula": "G(¬(Z ∧ X(H)))",
    "explanation": "Z represents 0deg/sec, and H represents 400deg/sec. This formula states that globally, it's not true that we can have 0deg/sec and immediately in the next state have 400deg/sec, capturing the physical limitation of the copter."
  },
  {
    "sentence": "During that time, error is building up in the controller in order to get you to 400deg/sec.",
    "formula": "G(A → F(E U H))",
    "explanation": "A represents the acceleration phase, E represents error building up, and H represents reaching 400deg/sec. This formula captures that globally, when in the acceleration phase, eventually there will be error building up until we reach the high rotation rate."
  },
  {
    "sentence": "When you let off the sticks, that error can still be present, resulting in an overshoot of desired attitude, followed by a bounce-back.",
    "formula": "G(S → F(E ∧ F(O ∧ F(B))))",
    "explanation": "S represents letting off the sticks, E is the error, O is overshoot, and B is bounce-back. The formula states that globally, whenever the sticks are let off, it's eventually followed by an error, which leads to an overshoot, and finally a bounce-back. This captures the sequence of events described in the sentence."
  },
  {
    "sentence": "This parameter can be tuned to help remove that error during the maneuver and soften if not remove the bounce-back.",
    "formula": "F(T ∧ G(M → (¬E ∧ (S ∨ ¬B))))",
    "explanation": "T represents tuning the parameter, M is the maneuver, E is the error, S is softening, and B is bounce-back. The formula states that eventually, after tuning, during any maneuver, there's no error and either the bounce-back is softened or removed entirely. This captures the potential outcomes of parameter tuning."
  },
  {
    "sentence": "Note that this is completely different from tuning the Rate D terms for Pitch and Roll, and should come only after those terms are properly tuned.",
    "formula": "G(D → F(P ∧ R ∧ F(T)))",
    "explanation": "D represents tuning Rate D terms, P is proper tuning for Pitch, R is proper tuning for Roll, and T is tuning the parameter in question. The formula states that globally, tuning Rate D terms should lead to proper tuning of Pitch and Roll, and only after that should the parameter in question be tuned. This captures the sequence and dependency of tuning operations."
  },
  {
    "sentence": "2.ATC_ACCEL_Y_MAX: Maximum acceleration in Yaw axis measured in Centi-degress/sec/sec.",
    "formula": "G(Y → (A ∧ ¬F(¬A)))",
    "explanation": "Y represents the Yaw axis, and A represents the maximum acceleration. The formula states that globally, when considering the Yaw axis, the acceleration is at its maximum and never exceeds this maximum in the future. This captures the concept of a maximum limit for acceleration."
  },
  {
    "sentence": "Same principle as ATC_ACCEL_R_MAX and ATC_ACCEL_P_MAX:Acceleration_Max_for_Pitch but on the YAW axis based on the ACRO_Y_RATE parameter value (likely a much lower, more attainable value.)",
    "formula": "G((R ∧ P) → Y)",
    "explanation": "R represents ATC_ACCEL_R_MAX, P represents ATC_ACCEL_P_MAX, and Y represents ATC_ACCEL_Y_MAX. The formula states that globally, the principles applied to Roll and Pitch maximum acceleration also apply to Yaw maximum acceleration. This captures the similarity in principle across different axes."
  },
  {
    "sentence": "3.ATC_THR_MIX_MAN: Balance between attitude and throttle control.",
    "formula": "G(B ↔ (A ∧ T))",
    "explanation": "B represents the balance, A represents attitude control, and T represents throttle control. The formula states that globally, there's a balance if and only if both attitude and throttle control are considered. This captures the concept of balancing two different control aspects."
  },
  {
    "sentence": "This value can be increased to improve attitude control when the throttle is cut for better Airmode handling, however a stable tune is essential before it can be increased.",
    "formula": "G(S → F(I ∧ (C → (A ∧ M))))",
    "explanation": "S represents a stable tune, I is increasing the value, C is cutting the throttle, A is improved attitude control, and M is better Airmode handling. The formula states that globally, a stable tune eventually leads to the possibility of increasing the value, which, when the throttle is cut, results in improved attitude control and better Airmode handling. This captures the sequence and conditions for improving control."
  }
]