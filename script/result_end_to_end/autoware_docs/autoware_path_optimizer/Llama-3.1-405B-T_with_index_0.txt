[
  {
    "index": 0,
    "formula": "G(inside_drivable_area)",
    "explanation": "The vehicle should always be inside the drivable area."
  },
  {
    "index": 1,
    "formula": "G(velocity = 0 -> X(inside_drivable_area))",
    "explanation": "If the vehicle's velocity is zero, it should be inside the drivable area at the next time step."
  },
  {
    "index": 2,
    "formula": "G(distance_to_road_boundary > mpt.clearance.soft_clearance_from_road)",
    "explanation": "The vehicle should always maintain a safe distance from the road boundary."
  },
  {
    "index": 3,
    "formula": "G(steering_wheel_stability)",
    "explanation": "The steering wheel should always be stable."
  },
  {
    "index": 4,
    "formula": "F(optimization_failure -> X(use_previously_generated_trajectory))",
    "explanation": "If optimization fails, the vehicle should use the previously generated trajectory at the next time step."
  },
  {
    "index": 5,
    "formula": "G(computation_time < max_computation_time)",
    "explanation": "The computation time should always be less than the maximum allowed computation time."
  },
  {
    "index": 6,
    "formula": "G(distance_to_goal_pose < replan.max_goal_moving_dist -> X(replan_trajectory))",
    "explanation": "If the distance to the goal pose is less than the maximum allowed distance, the vehicle should replan its trajectory at the next time step."
  },
  {
    "index": 7,
    "formula": "G(ego_moving_distance > replan.max_ego_moving_dist -> X(replan_trajectory))",
    "explanation": "If the ego vehicle has moved more than the maximum allowed distance, the vehicle should replan its trajectory at the next time step."
  },
  {
    "index": 8,
    "formula": "G(time_since_last_replan > replan_time_interval -> X(replan_trajectory))",
    "explanation": "If the time since the last replan is greater than the replan time interval, the vehicle should replan its trajectory at the next time step."
  }
]