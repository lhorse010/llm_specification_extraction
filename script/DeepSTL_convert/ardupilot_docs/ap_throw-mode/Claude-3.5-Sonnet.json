{
    "temporal_logic_formulars": [
        {
            "section-id": 0,
            "sentence-id": 2,
            "sentence": "This mode requires GPS.",
            "tl": "always ( ThisrequiresGPS == ThisresGPS )"
        },
        {
            "section-id": 1,
            "sentence-id": 0,
            "sentence": "This flight mode is available for multirotors only.",
            "tl": "always ( Thisflightt == available -> multirotrotrsonly )"
        },
        {
            "section-id": 3,
            "sentence-id": 2,
            "sentence": "3.Check GPS light is green",
            "tl": "always ( CheckGPSlightg == greeen )"
        },
        {
            "section-id": 3,
            "sentence-id": 4,
            "sentence": "The motors will not spin by default.",
            "tl": "always ( not ( motorspinbydefault ) )"
        },
        {
            "section-id": 3,
            "sentence-id": 5,
            "sentence": "5.Pick up the vehicle and throw it up and away from you (it must climb by 50cm/s and reach a total speed of 5m/s)",
            "tl": "always ( c5Pickupvehicle == t and ( hroitu > 0 and youitclimbby50cms == reachachatotatlsotalspeded5ms5ms < 5 ms ) )"
        },
        {
            "section-id": 3,
            "sentence-id": 7,
            "sentence": "The motors should start when the vehicle reaches the apex of it's trajectory.",
            "tl": "always ( not ( motorseicler == eachesapexitsr ) and not ( rajectory ) )"
        },
        {
            "section-id": 3,
            "sentence-id": 8,
            "sentence": "After the motors start this flight mode will first try to control it's attitude (return to level and stop rotating), then stop descending and finally it will attempt to stop moving horizontally.",
            "tl": "always ( ( not ( Atermototrsightr == fltrycontrili ) ) until ( not ( satitituretlr == letretl ) ) -> stopdescendt == instotepmtpotso = tmSingoinozolizotlinly )"
        },
        {
            "section-id": 4,
            "sentence-id": 0,
            "sentence": "1.THROW_TYPE: set to 0 if throwing the vehicle up, 1 if dropping the vehicle.",
            "tl": "always ( Y1 . THROW_TYPE == 0 throwingvehicleup1drop == dropingvehicle -> dropin == gvehicle )"
        },
        {
            "section-id": 4,
            "sentence-id": 1,
            "sentence": "If dropping, drop from a height of at least 10m.",
            "tl": "always ( droppinght >= 10 m )"
        },
        {
            "section-id": 4,
            "sentence-id": 2,
            "sentence": "2.THROW_MOT_START: controls whether the motors will spin slowly or not at all while waiting for the throw (0 = stopped, 1 = spinning slowly).",
            "tl": "always ( RHROW_MOT_START == controlswhethero == totrspinslowlowly or not ( wlawlitrs == t ) -> ( waititithngowo > 0 and waitithnow < stped1spoped1spnins == spinslowlowly ) )"
        },
        {
            "section-id": 4,
            "sentence-id": 4,
            "sentence": "3.THROW_NEXTMODE: the vehicle will switch into this flight mode after stopping (Auto, Guided, RTL, Land and Brake are support).",
            "tl": "always ( rise ( c3THROW_NEXTMODE == vehicleswitch ) until ( rise ( flilight == flit ) ) -> ( stopinuided == dRtoGuidRTLandBra ) and Brakesup == Brakesupopoprt )"
        },
        {
            "section-id": 4,
            "sentence-id": 6,
            "sentence": "4.THROW_ALT_MIN and THROW_ALT_MAX: set the altitude limits for THROW mode launch.",
            "tl": "always ( T4 . THROW_ALT_MIN == THROW_ALT_MAX -> altitudelimits == THROWlaulaunch )"
        },
        {
            "section-id": 4,
            "sentence-id": 7,
            "sentence": "Throw must happen above the minimum and below the maximum altitude above home after arming.",
            "tl": "always ( Throw > minimum < m and maximualtitudehome == meomeararming )"
        },
        {
            "section-id": 0,
            "sentence-id": 1,
            "sentence": "Once in the air, this mode does not accept any input from the pilot.",
            "tl": "always ( not ( Once == aceptinputpilot ) -> eventually ( fall ( Once == aceptilot ) ) )"
        }
    ]
}