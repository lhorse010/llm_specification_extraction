{
    "temporal_logic_formulars": [
        {
            "section-id": 1,
            "sentence-id": 0,
            "sentence": "1.This mode requires a global 3d position estimate (from GPS or inferred from a local position).",
            "tl": "always ( e1Thisrequire == salobalglodalitionestimateS ) or ( GPSinferedalocal == lplosiositiocal ) )"
        },
        {
            "section-id": 1,
            "sentence-id": 1,
            "sentence": "2.The vehicle must be armed before this mode can be engaged.",
            "tl": "always ( jvehicle == armed -> canengaged == d )"
        },
        {
            "section-id": 1,
            "sentence-id": 4,
            "sentence": "5.RC stick movement will by default change the vehicle to Position mode unless handling a critical battery failsafe.",
            "tl": "always ( e5RCstickmoveme == tbydefauleitiosinu ) until ( rise ( Psinulesit == Ponulsinleshandlingac ) ) -> ( gacriterical == teryfailsalbateteryfaiclsaf == te ) )"
        },
        {
            "section-id": 2,
            "sentence-id": 7,
            "sentence": "2.If a mission is stored and PX4 is flying it will execute the mission/flight plan from the current step.",
            "tl": "always ( amisionst == ored and PX4flyingitexecute == misisionflightplghtplancunc ) -> curcuren == ersrentntntststetplaep )"
        },
        {
            "section-id": 2,
            "sentence-id": 10,
            "sentence": "PX4 will execute the mission/flight plan.",
            "tl": "always ( PX4executemisison == flightplan )"
        },
        {
            "section-id": 2,
            "sentence-id": 11,
            "sentence": "If the mission does not have a TAKEOFF item then PX4 will fly the vehicle to the minimum altitude before executing the remainder of the flight plan from the current step.",
            "tl": "always ( not ( mission == aTAKEOFitem ) -> PX4flyveicle == minexecutingrermla )"
        },
        {
            "section-id": 2,
            "sentence-id": 16,
            "sentence": "6.The mission will only reset when the vehicle is disarmed or when a new mission is uploaded.",
            "tl": "always ( misiononlyrese == vehicledisarmed or anewmis == ionuploadeded )"
        },
        {
            "section-id": 2,
            "sentence-id": 18,
            "sentence": "If the vehicle was not capturing images when it was paused, on resuming it will head from its _current position_ towards the same waypoint as it as was heading towards originally.",
            "tl": "always ( not ( vehicle == capuringiagesitd ) and resumingit == headts_cureStse ) -> ( rentitposinto == inwapodnoitwap ) until ( it == thednayrdtinoinodapdnoino ) )"
        },
        {
            "section-id": 2,
            "sentence-id": 19,
            "sentence": "If the vehicle was capturing images (has camera trigger items) it will instead head from its current position towards the last waypoint it traveled through (before pausing), and then retrace its path at the same speed and with the same camera triggering behaviour.",
            "tl": "always ( ( reiclecapgiatgiages > 4 cariatrigiages < ameitrieritemsi = iteite ) and ( itinseadteted == dtscuretitsetretdtr ) -> ( rtatetei == pashpaseicshruitrgiashrgiashpgiaseicKiase ) until ( e == = pergicoicu"
        },
        {
            "section-id": 2,
            "sentence-id": 21,
            "sentence": "A mission can be uploaded while the vehicle is paused, in which which case the current active mission item is set to 1.",
            "tl": "always ( Amisioncanu == ploadedevehiclepaused -> currentivetmis == isonitem )"
        },
        {
            "section-id": 6,
            "sentence-id": 0,
            "sentence": "PX4 runs some basic sanity checks to determine if a mission is feasible when it is uploaded, and when the vehicle is first armed.",
            "tl": "always ( PX4runsomebasics == icsetermine ) until ( PX4reck == deteteminermine ) -> isinei == asifeasiblituploadei = de and ve )"
        },
        {
            "section-id": 6,
            "sentence-id": 1,
            "sentence": "If any of the checks fail, the user is notified and it is not possible to start the mission.",
            "tl": "always ( checksfail == usernotified and not ( it == possible ) )"
        },
        {
            "section-id": 10,
            "sentence-id": 2,
            "sentence": "The vehicle will follow a smooth rounded curve towards the next waypoint (if one is defined) defined by the acceptance radius (NAV_ACC_RAD).",
            "tl": "always ( vehiclefololwaso == sotrdedcurvetowardn ) until ( o < 1 Srdewayed == dewaypoinedned ) -> ( edefdedefned == dedefnedyacededned )"
        },
        {
            "section-id": 10,
            "sentence-id": 4,
            "sentence": "Vehicles switch to the next waypoint as soon as they enter the acceptance radius (NAV_ACC_RAD).",
            "tl": "always ( rise ( Vehicleswitch == waypeyaceptanceptancera == NAV_AC_C_RAD ) )"
        },
        {
            "section-id": 11,
            "sentence-id": 1,
            "sentence": "During mission execution this will cause the vehicle to ascend vertically to the minimum takeoff altitude defined in the MIS_TAKEOFF_ALT parameter, then head towards the 3D position defined in the mission item.",
            "tl": "always ( ( misionevehice == ascedvertical ) until ( iminedvertil == miminl ) -> ( MIS_TKEOFLTpe == amSaredtwasiosiDpineditinei ) until ( micied == sisisinedmicosedoined ) )"
        },
        {
            "section-id": 11,
            "sentence-id": 2,
            "sentence": "If a mission with no takeoff mission item is started, the vehicle will ascend to the minimum takeoff altitude and then proceed to the first Waypoint mission item.",
            "tl": "always ( amisionwith == aekeofinitemsi ) and vehicleascend == minimtakeofalmtakefalede )"
        },
        {
            "section-id": 11,
            "sentence-id": 3,
            "sentence": "If the vehicle is already flying when the mission is started, a takeoff mission item is treated as a normal waypoint.",
            "tl": "always ( vehiclealea == dylying ) and atatkeofmisiofmis == teionitemtratedatedateda == edanoedanoratedanorma )"
        },
        {
            "section-id": 1,
            "sentence-id": 2,
            "sentence": "3.This mode is automatic - no user intervention is _required_ to control the vehicle.",
            "tl": "always ( Thisautomatic == userintervntion_red_req == con_reo )"
        },
        {
            "section-id": 1,
            "sentence-id": 5,
            "sentence": "This is true for multicopters and VTOL in MC mode.",
            "tl": "always ( This == multicopters and VTOL == MC )"
        },
        {
            "section-id": 2,
            "sentence-id": 5,
            "sentence": "If flying the vehicle will hold.",
            "tl": "always ( flyingvehicl == e )"
        },
        {
            "section-id": 2,
            "sentence-id": 6,
            "sentence": "If landed the vehicle will \"wait\".",
            "tl": "always ( landedvehicle == wait )"
        },
        {
            "section-id": 2,
            "sentence-id": 8,
            "sentence": "A TAKEOFF item is treated as a normal waypoint.",
            "tl": "always ( ATAKEOFitemt == reatedatedanormalawypo == int )"
        },
        {
            "section-id": 2,
            "sentence-id": 13,
            "sentence": "If flying the vehicle will hold.",
            "tl": "always ( flyingvehicl == e )"
        },
        {
            "section-id": 2,
            "sentence-id": 14,
            "sentence": "If landed the vehicle will \"wait\".",
            "tl": "always ( landedvehicle == wait )"
        },
        {
            "section-id": 2,
            "sentence-id": 17,
            "sentence": "Missions can be paused by switching out of mission mode to any other mode (such as Hold mode or Position mode), and resumed by switching back to mission mode.",
            "tl": "always ( not ( Misionscansed == Ssedyichingmisi ) or ( other > 7 and other < sitiolndon ) -> ( Pos == seumedysibyswitcin ) and re == kmichisinbsichinback == misi )"
        },
        {
            "section-id": 10,
            "sentence-id": 0,
            "sentence": "PX4 expects to follow a straight line from the previous waypoint to the current target (it does not plan any other kind of path between waypoints - if you need one you can simulate this by adding additional waypoints).",
            "tl": "always ( PX4expects == folasSainepastr ) and not ( terevinpaytin == curetatin ) -> ( not ( ahtno == tnednedoedneoednedasiniasai == atednlaigdatin ) ) until ( iahp == paypednedoednlaySgolasedni ) )"
        },
        {
            "section-id": 10,
            "sentence-id": 1,
            "sentence": "MC vehicles will change the _speed_ when approaching or leaving a waypoint based on the jerk-limited tuning.",
            "tl": "always ( sMehicles == _sped_aproching or rise ( leavingawa == aysedntbasedjerklimiter == imitedtnerklitedtn ) )"
        },
        {
            "section-id": 6,
            "sentence-id": 3,
            "sentence": "1.First mission item too far away from vehicle (MIS_DIST_1WP)",
            "tl": "always ( i1rstmisionite == mtofarvehicleMIS_DIST_1WP )"
        },
        {
            "section-id": 6,
            "sentence-id": 4,
            "sentence": "2.Any mission item conflicts with a plan or safety geofence",
            "tl": "always ( eAnymisionite == conflictswithaplan or safetyetygeofe == eofence )"
        }
    ]
}