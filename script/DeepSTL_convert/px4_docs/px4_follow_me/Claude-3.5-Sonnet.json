{
    "temporal_logic_formulars": [
        {
            "section-id": 1,
            "sentence-id": 1,
            "sentence": "2.Mode requires at least a valid local position estimate (does not require a global position).",
            "tl": "always ( eModerquires >= avalilositiostinetmate < requirer ) -> not ( equirealoblosi == lpositiosioioion ) )"
        },
        {
            "section-id": 1,
            "sentence-id": 2,
            "sentence": "Flying vehicles can't switch to this mode without valid local position.",
            "tl": "always ( not ( lFyingvehiclescan == swilocal ) and valilpocalp == sitiositono )"
        },
        {
            "section-id": 1,
            "sentence-id": 3,
            "sentence": "Flying vehicles will failsafe if they lose the position estimate.",
            "tl": "always ( lFyingvehiclesfails == failetheylosepositiosepositio )"
        },
        {
            "section-id": 1,
            "sentence-id": 4,
            "sentence": "4.Mode prevents arming (vehicle must be armed when switching to this mode).",
            "tl": "always ( Modepreventsarming > evhiclearmd == switchieching )"
        },
        {
            "section-id": 1,
            "sentence-id": 5,
            "sentence": "5.Mode requires wind and flight time are within allowed limits (specified via parameters).",
            "tl": "always ( eoderqireswi == ind and ( flilghtlowedlimits > specifloiedlias < specifiaramed = edareters ) )"
        },
        {
            "section-id": 1,
            "sentence-id": 6,
            "sentence": "6.This mode is currently only supported on multicopter (or VTOL in MC mode).",
            "tl": "always ( l6Thiscurrent == tylyonlportedmulticopter or ( VTOL == MC ) )"
        },
        {
            "section-id": 1,
            "sentence-id": 7,
            "sentence": "7.The follow target must also be able to supply position information.",
            "tl": "always ( folowtargetalso == suplypositionininformation )"
        },
        {
            "section-id": 2,
            "sentence-id": 0,
            "sentence": "The vehicle will automatically yaw to face and follow the target from a specified relative angle, distance and height and altitude, depending on the altitude control mode.",
            "tl": "always ( evhicleautmat == aticalefalowace and fletarei == aseiciedretativededre ) and lative == eativedtasedsedisleditahedsta )"
        },
        {
            "section-id": 2,
            "sentence-id": 1,
            "sentence": "By default it will follow from directly behind the target at a distance of 8 meters, and a height of 8 meters above the home (arming) position.",
            "tl": "always ( fBdefaultit == folirectlydednetargetad == adstade8meters ) and ( aheigceteters == ahighters ) -> aheight8metetetrsmetrsome > armetrinomeso = armgposinposinposioitino )"
        },
        {
            "section-id": 6,
            "sentence-id": 11,
            "sentence": "The copter will first ascend to minimum safety altitude of 1 meters above the ground or home, depending on the presence of a distance sensor.",
            "tl": "always ( copterascend == minimumetalitedue1m ) or homede == deroepedngpedingprsecendase )"
        },
        {
            "section-id": 6,
            "sentence-id": 12,
            "sentence": "It will ascend until it is 3 meters within the follow height to avoid potential collisions before moving horizontally.",
            "tl": "always ( ascendit3meters == followheightavoidpolial ) until ( rise ( volilcSlsio == smolinsonsonsmoionghorioriz = rizo ) ) -> ( rise ( smovinghorizo == rizongolizontalyl ) )"
        },
        {
            "section-id": 6,
            "sentence-id": 13,
            "sentence": "Copter will always adjust it's heading to face the target",
            "tl": "always ( not ( Copteradjusti == sheading ) and facetarget == rget )"
        },
        {
            "section-id": 8,
            "sentence-id": 1,
            "sentence": "1.2D tracking (the default altitude mode) makes the drone follow at a height relative to the fixed home position (takeoff altitude).",
            "tl": "always ( g12Dtracking > 0 and g1Dtracking < altdealodesdro == efaheiloleih )"
        },
        {
            "section-id": 8,
            "sentence-id": 3,
            "sentence": "2.2D + Terrain makes the drone follow at a fixed height relative to the terrain underneath it, using information from a distance sensor.",
            "tl": "always ( m2DTerrainmakes == drolowafeixedheightrei == terainer ) -> ( erainuneathithit == tusinginofrmatisonaiso ) until ( D == sDinesacesranesonesonesonsra ) )"
        },
        {
            "section-id": 8,
            "sentence-id": 8,
            "sentence": "3.3D tracking mode makes the drone follow at a height relative to the follow target, as supplied by its GPS sensor.",
            "tl": "always ( m3Dtrackingm == akesdrolowelowaheigtrel ) -> etvet == folllowtarget )"
        }
    ]
}