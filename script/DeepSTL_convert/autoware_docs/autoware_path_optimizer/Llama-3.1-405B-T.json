{
    "temporal_logic_formulars": [
        {
            "section-id": 0,
            "sentence-id": 0,
            "sentence": "This package generates a trajectory that is kinematically-feasible to drive and collision-free based on the input path, drivable area.",
            "tl": "always ( eThispackagegenerate == atraectryicale ) and licasible == drlicoledeisionfredasedinp == ptahredasedaledahpt )"
        },
        {
            "section-id": 0,
            "sentence-id": 1,
            "sentence": "Only position and orientation of trajectory are updated in this module, and velocity is just taken over from the one in the input path.",
            "tl": "always ( Onlypositino == orintatr and ojectoryudated == modupd ) -> edulocityjulety == mocityjust -> Sustone or oneine == input )"
        },
        {
            "section-id": 1,
            "sentence-id": 1,
            "sentence": "1.make the trajectory inside the drivable area as much as possible",
            "tl": "always ( rise ( maketrajectory == drivableareamuchpossible ) -> m == possiblele )"
        },
        {
            "section-id": 1,
            "sentence-id": 3,
            "sentence": "2.insert stop point before the planned footprint will be outside the drivable area",
            "tl": "always ( not ( p2insertstop == planedfotprint ) -> not ( drivablearearea == earearea ) )"
        },
        {
            "section-id": 3,
            "sentence-id": 0,
            "sentence": "When one of the following conditions are met, trajectory optimization will be executed.",
            "tl": "always ( oneettra == jectopimization = executed )"
        },
        {
            "section-id": 3,
            "sentence-id": 3,
            "sentence": "1.Ego moves longer than replan.max_ego_moving_dist in one cycle. (default: 3.0 [m])",
            "tl": "always ( rEgomoveslongereplanger == replg_o_moving_dist = onecyclecyle ) until [ 0 : odist ) -> edefault >= 3.0 and edefaultl <= m )"
        },
        {
            "section-id": 3,
            "sentence-id": 5,
            "sentence": "2.Trajectory's end, which is considered as the goal pose, moves longer than replan.max_goal_moving_dist in one cycle. (default: 15.0 [ms])",
            "tl": "always ( not ( s2Trajectoreder == dgolasemovesloner ) ) until ( xmovesle == rmoleplnger ) -> mx_golin_dst >== onecyclgltefault15 . 0 and msdefault <= mefault15 . 0 )"
        },
        {
            "section-id": 3,
            "sentence-id": 7,
            "sentence": "3.Time passes. (default: 1.0 [s])",
            "tl": "always ( demepassese > 0 . d and defaseses <= efault >= 1.0 and sdefault <= s ) -> s )"
        },
        {
            "section-id": 3,
            "sentence-id": 9,
            "sentence": "4.The input path changes laterally longer than replan.max_path_shape_around_ego_lat_dist in one cycle. (default: 2.0)",
            "tl": "always ( rise ( einputpathlatlera == erlylonger ) and mx_path_ath_ == eo_ro_ego_laud_eo_lat_l ) -> tonecycldist == onefauleclt2 . 0 and default < 4.0 )"
        },
        {
            "section-id": 4,
            "sentence-id": 0,
            "sentence": "This module makes the trajectory kinematically-feasible and collision-free.",
            "tl": "always ( Thismodulemakes == trajectryineatical ) and ly == fellisionible )"
        },
        {
            "section-id": 4,
            "sentence-id": 2,
            "sentence": "This optimization considers vehicle kinematics and collision checking with road boundary and obstacles.",
            "tl": "always ( Thisoptimizatin == ocsiersieiclekinematics and colislinckin == itheckingwthrodo = ithrodadn )"
        },
        {
            "section-id": 4,
            "sentence-id": 4,
            "sentence": "The trajectory just in front of the ego must not be changed a lot so that the steering wheel will be stable.",
            "tl": "always ( not rise ( trajectoryjust == frontontego ) and steeringwhel == stelstablelele )"
        },
        {
            "section-id": 5,
            "sentence-id": 0,
            "sentence": "Velocity is assigned in the optimized trajectory from the velocity in the behavior path.",
            "tl": "always ( Velocityassigned == optimizedtrajectory ) -> ryvelocity == behaviorpath )"
        },
        {
            "section-id": 6,
            "sentence-id": 0,
            "sentence": "Optimized trajectory is too short for velocity planning, therefore extend the trajectory by concatenating the optimized trajectory and the behavior path considering drivability.",
            "tl": "always ( Opimizedtrajetr == tosorytosocitrelo == erefleninit ) or terefoe == trecendtetectenatene )"
        },
        {
            "section-id": 6,
            "sentence-id": 1,
            "sentence": "Generated trajectory is checked if it is inside the drivable area or not, and if outside drivable area, output a trajectory inside drivable area with the behavior path or the previously generated trajectory.",
            "tl": "always ( not rise ( enratedtrajec == redcedtredco = itrdie ) and not ( drivalearea == ratreatrdautrde ) and datrea == ratrjedetrvcodaudervaleatrvaler ) -> ( ea == rialarvaleabeareawahavalereaheavheath == hrviodtredt"
        },
        {
            "section-id": 6,
            "sentence-id": 5,
            "sentence": "1.If optimized trajectory is inside the drivable area, and the remained trajectory is inside/outside the drivable area, the output trajectory will be just concatenation of those two trajectories.",
            "tl": "always ( rise ( optimizedtraje == rdaedctrydrei ) and not ( trajectry == drivajlectrearearearea ) and not ( dre == drotreatreatotrea ) -> ( ectotryjutrtr == tatocStnatonctetonetotSt == theosetorjetotetoricetorjetor"
        },
        {
            "section-id": 6,
            "sentence-id": 7,
            "sentence": "2.If optimized trajectory is outside the drivable area, and the remained trajectory is inside/outside the drivable area, and if the previously generated trajectory is memorized, the output trajectory will be the previously generated trajectory, where zero velocity is inserted to the point firstly going outside the drivable area; and if the previously generated trajectory is not memorized, the output trajectory will be a part of trajectory just transformed from the behavior path, where zero velocity is inserted to the point firstly going outside the drivable area.",
            "tl": "always ( not ( roptimizedtredtr == eajedtryecoredrjedtry ) and not ( drivajlectre == rydreareda = dre ) and trivajlectearea == eare ) and edreda == peredapeoleaeare )"
        },
        {
            "section-id": 6,
            "sentence-id": 9,
            "sentence": "The output trajectory is memorized as a previously generated trajectory for the next cycle.",
            "tl": "always ( outputrajector == memedaprviosedue )"
        },
        {
            "section-id": 7,
            "sentence-id": 0,
            "sentence": "In the current design, since there are some modelling errors, the constraints are considered to be soft constraints.",
            "tl": "always ( ( curentdesi == in ) since ( somemodelinero == costranstrainstsidererd = softred ) -> erded == softsoftconstrtconstrainstrainst )"
        },
        {
            "section-id": 7,
            "sentence-id": 1,
            "sentence": "Therefore, we have to make sure that the optimized trajectory is inside the drivable area or not after optimization.",
            "tl": "always ( eTherforewe == makesureoptimizedtrajector ) or not rise ( edry == drivalivableareoreareao ) )"
        },
        {
            "section-id": 13,
            "sentence-id": 1,
            "sentence": "This parameter describes how much margin to make between the trajectory and road boundaries.",
            "tl": "always ( Thisparameterderde == scibeshocmuhmargin = maketraketry and rodboun == radboundajecdarecoriedaredarie )"
        },
        {
            "section-id": 13,
            "sentence-id": 2,
            "sentence": "Due to the model error for optimization, the constraint such as collision-free is not fully met.",
            "tl": "always ( uDe == modelerroroptiminonc == trastrintsuchcolis ) since ( Due == molinlin ) -> not ( efulisolionfre == fulllllymet ) )"
        },
        {
            "section-id": 13,
            "sentence-id": 5,
            "sentence": "The point on the vehicle, offset forward with this parameter from the base link` tries to follow the reference path.",
            "tl": "always ( vehicleofse == fsetfrwardtr ) until ( ward == arameter ) -> baselinkteies == folowrefre )"
        },
        {
            "section-id": 15,
            "sentence-id": 2,
            "sentence": "if the trajectory after MPT is not robust, make mpt.weight.steer_input_weight or mpt.weight.steer_rate_weight larger, which are stability of steering wheel along the trajectory.",
            "tl": "always ( not ( trajectoryMPT == robstmakempet . ight . e ) or eter_inp == eight . etwe_t_ereight ) since ( tester == ster_we_ ) -> ( ter_ateiysete == teriteringweltelinhelahe ) since ( te_ == stesterierite ) )"
        },
        {
            "section-id": 16,
            "sentence-id": 0,
            "sentence": "option.enable_skip_optimization skips MPT optimization.",
            "tl": "always ( optionable_si == pizitionsinkipsMPToptimi == imizpt ) -> optimizi == izopiatimztiatioti == iatotimiotino )"
        },
        {
            "section-id": 16,
            "sentence-id": 1,
            "sentence": "option.enable_calculation_time_info enables showing each calculation time for functions and total calculation time on the terminal.",
            "tl": "always ( optionenabl_leca == lion_inesha ) until ( owgcles == howinlalculatin = ngl ) -> f == funcatunctitolcSlatinsonso )"
        },
        {
            "section-id": 16,
            "sentence-id": 2,
            "sentence": "option.enable_outside_drivable_area_stop enables stopping just before the generated trajectory point will be outside the drivable area.",
            "tl": "always ( not ( optioneable_od == i_derivale_r ) and enablstpena == gstpingjustpenerate ) -> not ( tgeneratedtr == dtrajeratedtrdr ) )"
        },
        {
            "section-id": 13,
            "sentence-id": 4,
            "sentence": "2.modify mpt.kinematics.optimization_center_offset",
            "tl": "always ( kinmoifymptics == imiziation_cententetr_entetr_ == r_eter_ofoffset ) since ( modi == modifympmp ) -> eventually ( modifymSfsetetet == = er_ofseteter_offfset ) )"
        }
    ]
}